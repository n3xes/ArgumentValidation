#region Header: Copyright © 2013, John Caruthers

// =====================================================================================================================
// <copyright file="ArgumentRelationalValidationExtension.cs">
//		Copyright © 2013, John Caruthers
//		All rights reserved.
//
//		THIS PROGRAM ND ALL OF THE INFORMATION CONTAINED HEREIN IS FREE SOFTWARE:
//		YOU CAN REDISTRIBUTE IT AND/OR MODIFY IT UNDER THE TERMS OF THE GNU GENERAL
//		PUBLIC LICENSE AS PUBLISHED BY THE FREE SOFTWARE FOUNDATION, EITHER VERSION
//		3 OF THE LICENSE, OR (AT YOUR OPTION) ANY LATER VERSION.
//
//		THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT
//		ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS
//		FOR A PARTICULAR PURPOSE.SEE THE GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
//
//		YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE ALONG
//		WITH THIS PROGRAM.  IF NOT, SEE <https://www.gnu.org/licenses/>.
//
// </copyright>
////====================================================================================================================

#endregion

namespace N3XeS.CSharp.ArgumentValidation.Extensions
{
	#region Directives

	using System;

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

	using System.Numerics;

#endif

	using JetBrains.Annotations;

	using Utilities;

	#endregion

	#region Delegates

	#endregion

	#region Enums

	#endregion

	/// <summary>
	///		An argument relational validation related extension.
	/// </summary>
	/// <author>
	///  <AuthorName>John Caruthers</AuthorName>
	///  <CreationDate>Tuesday, September 24, 2013  (09/24/2013)</CreationDate>
	///  <CreationTime>06:52:09 PM</CreationTime>
	/// </author>
	/// <history>
	///  <Modification>
	///   <ModifierName></ModifierName>
	///   <ModificationDate></ModificationDate>
	///   <ModificationTime></ModificationTime>
	///   <ModificationDescription></ModificationDescription>
	///  </Modification>
	/// </history>
	public static class ArgumentRelationalValidationExtension
	{
		#region Constants

		#endregion

		#region Instance/Member/Field Variables

		#endregion

		#region Constructors

		#endregion

		#region Destructor

		#endregion

		#region Events

		#endregion

		#region Properties/Accessors/Mutators

		#endregion

		#region Indexers

		#endregion

		#region Event Handlers

		#endregion

		#region Methods/Functions

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this BigInteger valueArgument,
													[NotNull] String nameArgument,
													BigInteger valueBoundLower,
													BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this BigInteger valueArgument,
													[NotNull] String nameArgument,
													BigInteger valueBoundLower,
													BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this BigInteger valueArgument,
													[NotNull] String nameArgument,
													BigInteger? valueBoundLower,
													BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this BigInteger valueArgument,
													[NotNull] String nameArgument,
													BigInteger? valueBoundLower,
													BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this BigInteger? valueArgument,
													[NotNull] String nameArgument,
													BigInteger valueBoundLower,
													BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this BigInteger? valueArgument,
													[NotNull] String nameArgument,
													BigInteger valueBoundLower,
													BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this BigInteger? valueArgument,
													[NotNull] String nameArgument,
													BigInteger? valueBoundLower,
													BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this BigInteger? valueArgument,
													[NotNull] String nameArgument,
													BigInteger? valueBoundLower,
													BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundLower);
		}

#endif

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this DateTime valueArgument,
													[NotNull] String nameArgument,
													DateTime valueBoundLower,
													DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this DateTime valueArgument,
													[NotNull] String nameArgument,
													DateTime valueBoundLower,
													DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this DateTime valueArgument,
													[NotNull] String nameArgument,
													DateTime? valueBoundLower,
													DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this DateTime valueArgument,
													[NotNull] String nameArgument,
													DateTime? valueBoundLower,
													DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this DateTime? valueArgument,
													[NotNull] String nameArgument,
													DateTime valueBoundLower,
													DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this DateTime? valueArgument,
													[NotNull] String nameArgument,
													DateTime valueBoundLower,
													DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this DateTime? valueArgument,
													[NotNull] String nameArgument,
													DateTime? valueBoundLower,
													DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this DateTime? valueArgument,
													[NotNull] String nameArgument,
													DateTime? valueBoundLower,
													DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Byte valueArgument,
													[NotNull] String nameArgument,
													Byte valueBoundLower,
													Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Byte valueArgument,
													[NotNull] String nameArgument,
													Byte valueBoundLower,
													Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Byte valueArgument,
													[NotNull] String nameArgument,
													Byte? valueBoundLower,
													Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Byte valueArgument,
													[NotNull] String nameArgument,
													Byte? valueBoundLower,
													Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Byte? valueArgument,
													[NotNull] String nameArgument,
													Byte valueBoundLower,
													Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Byte? valueArgument,
													[NotNull] String nameArgument,
													Byte valueBoundLower,
													Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Byte? valueArgument,
													[NotNull] String nameArgument,
													Byte? valueBoundLower,
													Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Byte? valueArgument,
													[NotNull] String nameArgument,
													Byte? valueBoundLower,
													Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Decimal valueArgument,
													[NotNull] String nameArgument,
													Decimal valueBoundLower,
													Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Decimal valueArgument,
													[NotNull] String nameArgument,
													Decimal valueBoundLower,
													Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Decimal valueArgument,
													[NotNull] String nameArgument,
													Decimal? valueBoundLower,
													Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Decimal valueArgument,
													[NotNull] String nameArgument,
													Decimal? valueBoundLower,
													Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Decimal? valueArgument,
													[NotNull] String nameArgument,
													Decimal valueBoundLower,
													Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Decimal? valueArgument,
													[NotNull] String nameArgument,
													Decimal valueBoundLower,
													Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Decimal? valueArgument,
													[NotNull] String nameArgument,
													Decimal? valueBoundLower,
													Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Decimal? valueArgument,
													[NotNull] String nameArgument,
													Decimal? valueBoundLower,
													Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Double valueArgument,
													[NotNull] String nameArgument,
													Double valueBoundLower,
													Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Double valueArgument,
													[NotNull] String nameArgument,
													Double valueBoundLower,
													Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Double valueArgument,
													[NotNull] String nameArgument,
													Double? valueBoundLower,
													Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Double valueArgument,
													[NotNull] String nameArgument,
													Double? valueBoundLower,
													Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Double? valueArgument,
													[NotNull] String nameArgument,
													Double valueBoundLower,
													Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Double? valueArgument,
													[NotNull] String nameArgument,
													Double valueBoundLower,
													Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Double? valueArgument,
													[NotNull] String nameArgument,
													Double? valueBoundLower,
													Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Double? valueArgument,
													[NotNull] String nameArgument,
													Double? valueBoundLower,
													Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Single valueArgument,
													[NotNull] String nameArgument,
													Single valueBoundLower,
													Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Single valueArgument,
													[NotNull] String nameArgument,
													Single valueBoundLower,
													Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Single valueArgument,
													[NotNull] String nameArgument,
													Single? valueBoundLower,
													Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Single valueArgument,
													[NotNull] String nameArgument,
													Single? valueBoundLower,
													Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Single? valueArgument,
													[NotNull] String nameArgument,
													Single valueBoundLower,
													Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Single? valueArgument,
													[NotNull] String nameArgument,
													Single valueBoundLower,
													Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Single? valueArgument,
													[NotNull] String nameArgument,
													Single? valueBoundLower,
													Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Single? valueArgument,
													[NotNull] String nameArgument,
													Single? valueBoundLower,
													Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int32 valueArgument,
													[NotNull] String nameArgument,
													Int32 valueBoundLower,
													Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int32 valueArgument,
													[NotNull] String nameArgument,
													Int32 valueBoundLower,
													Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int32 valueArgument,
													[NotNull] String nameArgument,
													Int32? valueBoundLower,
													Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int32 valueArgument,
													[NotNull] String nameArgument,
													Int32? valueBoundLower,
													Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int32? valueArgument,
													[NotNull] String nameArgument,
													Int32 valueBoundLower,
													Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int32? valueArgument,
													[NotNull] String nameArgument,
													Int32 valueBoundLower,
													Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int32? valueArgument,
													[NotNull] String nameArgument,
													Int32? valueBoundLower,
													Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int32? valueArgument,
													[NotNull] String nameArgument,
													Int32? valueBoundLower,
													Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int64 valueArgument,
													[NotNull] String nameArgument,
													Int64 valueBoundLower,
													Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int64 valueArgument,
													[NotNull] String nameArgument,
													Int64 valueBoundLower,
													Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int64 valueArgument,
													[NotNull] String nameArgument,
													Int64? valueBoundLower,
													Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int64 valueArgument,
													[NotNull] String nameArgument,
													Int64? valueBoundLower,
													Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int64? valueArgument,
													[NotNull] String nameArgument,
													Int64 valueBoundLower,
													Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int64? valueArgument,
													[NotNull] String nameArgument,
													Int64 valueBoundLower,
													Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int64? valueArgument,
													[NotNull] String nameArgument,
													Int64? valueBoundLower,
													Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		public static void RequireArgumentIsBetween(this Int64? valueArgument,
													[NotNull] String nameArgument,
													Int64? valueBoundLower,
													Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this SByte valueArgument,
													[NotNull] String nameArgument,
													SByte valueBoundLower,
													SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this SByte valueArgument,
													[NotNull] String nameArgument,
													SByte valueBoundLower,
													SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this SByte valueArgument,
													[NotNull] String nameArgument,
													SByte? valueBoundLower,
													SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this SByte valueArgument,
													[NotNull] String nameArgument,
													SByte? valueBoundLower,
													SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this SByte? valueArgument,
													[NotNull] String nameArgument,
													SByte valueBoundLower,
													SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this SByte? valueArgument,
													[NotNull] String nameArgument,
													SByte valueBoundLower,
													SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this SByte? valueArgument,
													[NotNull] String nameArgument,
													SByte? valueBoundLower,
													SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this SByte? valueArgument,
													[NotNull] String nameArgument,
													SByte? valueBoundLower,
													SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this Int16 valueArgument,
													[NotNull] String nameArgument,
													Int16 valueBoundLower,
													Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this Int16 valueArgument,
													[NotNull] String nameArgument,
													Int16 valueBoundLower,
													Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this Int16 valueArgument,
													[NotNull] String nameArgument,
													Int16? valueBoundLower,
													Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this Int16 valueArgument,
													[NotNull] String nameArgument,
													Int16? valueBoundLower,
													Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this Int16? valueArgument,
													[NotNull] String nameArgument,
													Int16 valueBoundLower,
													Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this Int16? valueArgument,
													[NotNull] String nameArgument,
													Int16 valueBoundLower,
													Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this Int16? valueArgument,
													[NotNull] String nameArgument,
													Int16? valueBoundLower,
													Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this Int16? valueArgument,
													[NotNull] String nameArgument,
													Int16? valueBoundLower,
													Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt32 valueArgument,
													[NotNull] String nameArgument,
													UInt32 valueBoundLower,
													UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt32 valueArgument,
													[NotNull] String nameArgument,
													UInt32 valueBoundLower,
													UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt32 valueArgument,
													[NotNull] String nameArgument,
													UInt32? valueBoundLower,
													UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt32 valueArgument,
													[NotNull] String nameArgument,
													UInt32? valueBoundLower,
													UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt32? valueArgument,
													[NotNull] String nameArgument,
													UInt32 valueBoundLower,
													UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt32? valueArgument,
													[NotNull] String nameArgument,
													UInt32 valueBoundLower,
													UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt32? valueArgument,
													[NotNull] String nameArgument,
													UInt32? valueBoundLower,
													UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt32? valueArgument,
													[NotNull] String nameArgument,
													UInt32? valueBoundLower,
													UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt64 valueArgument,
													[NotNull] String nameArgument,
													UInt64 valueBoundLower,
													UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt64 valueArgument,
													[NotNull] String nameArgument,
													UInt64 valueBoundLower,
													UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt64 valueArgument,
													[NotNull] String nameArgument,
													UInt64? valueBoundLower,
													UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt64 valueArgument,
													[NotNull] String nameArgument,
													UInt64? valueBoundLower,
													UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt64? valueArgument,
													[NotNull] String nameArgument,
													UInt64 valueBoundLower,
													UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt64? valueArgument,
													[NotNull] String nameArgument,
													UInt64 valueBoundLower,
													UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt64? valueArgument,
													[NotNull] String nameArgument,
													UInt64? valueBoundLower,
													UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt64? valueArgument,
													[NotNull] String nameArgument,
													UInt64? valueBoundLower,
													UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt16 valueArgument,
													[NotNull] String nameArgument,
													UInt16 valueBoundLower,
													UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt16 valueArgument,
													[NotNull] String nameArgument,
													UInt16 valueBoundLower,
													UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt16 valueArgument,
													[NotNull] String nameArgument,
													UInt16? valueBoundLower,
													UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt16 valueArgument,
													[NotNull] String nameArgument,
													UInt16? valueBoundLower,
													UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt16? valueArgument,
													[NotNull] String nameArgument,
													UInt16 valueBoundLower,
													UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt16? valueArgument,
													[NotNull] String nameArgument,
													UInt16 valueBoundLower,
													UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt16? valueArgument,
													[NotNull] String nameArgument,
													UInt16? valueBoundLower,
													UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/> and less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetween(this UInt16? valueArgument,
													[NotNull] String nameArgument,
													UInt16? valueBoundLower,
													UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetween(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this BigInteger valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger valueBoundLower,
															 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this BigInteger valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger valueBoundLower,
															 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this BigInteger valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger? valueBoundLower,
															 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this BigInteger valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger? valueBoundLower,
															 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this BigInteger? valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger valueBoundLower,
															 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this BigInteger? valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger valueBoundLower,
															 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this BigInteger? valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger? valueBoundLower,
															 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this BigInteger? valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger? valueBoundLower,
															 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

#endif

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this DateTime valueArgument,
															 [NotNull] String nameArgument,
															 DateTime valueBoundLower,
															 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this DateTime valueArgument,
															 [NotNull] String nameArgument,
															 DateTime valueBoundLower,
															 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this DateTime valueArgument,
															 [NotNull] String nameArgument,
															 DateTime? valueBoundLower,
															 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this DateTime valueArgument,
															 [NotNull] String nameArgument,
															 DateTime? valueBoundLower,
															 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this DateTime? valueArgument,
															 [NotNull] String nameArgument,
															 DateTime valueBoundLower,
															 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this DateTime? valueArgument,
															 [NotNull] String nameArgument,
															 DateTime valueBoundLower,
															 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this DateTime? valueArgument,
															 [NotNull] String nameArgument,
															 DateTime? valueBoundLower,
															 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this DateTime? valueArgument,
															 [NotNull] String nameArgument,
															 DateTime? valueBoundLower,
															 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Byte valueArgument,
															 [NotNull] String nameArgument,
															 Byte valueBoundLower,
															 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Byte valueArgument,
															 [NotNull] String nameArgument,
															 Byte valueBoundLower,
															 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Byte valueArgument,
															 [NotNull] String nameArgument,
															 Byte? valueBoundLower,
															 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Byte valueArgument,
															 [NotNull] String nameArgument,
															 Byte? valueBoundLower,
															 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Byte? valueArgument,
															 [NotNull] String nameArgument,
															 Byte valueBoundLower,
															 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Byte? valueArgument,
															 [NotNull] String nameArgument,
															 Byte valueBoundLower,
															 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Byte? valueArgument,
															 [NotNull] String nameArgument,
															 Byte? valueBoundLower,
															 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Byte? valueArgument,
															 [NotNull] String nameArgument,
															 Byte? valueBoundLower,
															 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Decimal valueArgument,
															 [NotNull] String nameArgument,
															 Decimal valueBoundLower,
															 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Decimal valueArgument,
															 [NotNull] String nameArgument,
															 Decimal valueBoundLower,
															 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Decimal valueArgument,
															 [NotNull] String nameArgument,
															 Decimal? valueBoundLower,
															 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Decimal valueArgument,
															 [NotNull] String nameArgument,
															 Decimal? valueBoundLower,
															 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Decimal? valueArgument,
															 [NotNull] String nameArgument,
															 Decimal valueBoundLower,
															 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Decimal? valueArgument,
															 [NotNull] String nameArgument,
															 Decimal valueBoundLower,
															 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Decimal? valueArgument,
															 [NotNull] String nameArgument,
															 Decimal? valueBoundLower,
															 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Decimal? valueArgument,
															 [NotNull] String nameArgument,
															 Decimal? valueBoundLower,
															 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Double valueArgument,
															 [NotNull] String nameArgument,
															 Double valueBoundLower,
															 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Double valueArgument,
															 [NotNull] String nameArgument,
															 Double valueBoundLower,
															 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Double valueArgument,
															 [NotNull] String nameArgument,
															 Double? valueBoundLower,
															 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Double valueArgument,
															 [NotNull] String nameArgument,
															 Double? valueBoundLower,
															 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Double? valueArgument,
															 [NotNull] String nameArgument,
															 Double valueBoundLower,
															 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Double? valueArgument,
															 [NotNull] String nameArgument,
															 Double valueBoundLower,
															 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Double? valueArgument,
															 [NotNull] String nameArgument,
															 Double? valueBoundLower,
															 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Double? valueArgument,
															 [NotNull] String nameArgument,
															 Double? valueBoundLower,
															 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Single valueArgument,
															 [NotNull] String nameArgument,
															 Single valueBoundLower,
															 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Single valueArgument,
															 [NotNull] String nameArgument,
															 Single valueBoundLower,
															 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Single valueArgument,
															 [NotNull] String nameArgument,
															 Single? valueBoundLower,
															 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Single valueArgument,
															 [NotNull] String nameArgument,
															 Single? valueBoundLower,
															 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Single? valueArgument,
															 [NotNull] String nameArgument,
															 Single valueBoundLower,
															 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Single? valueArgument,
															 [NotNull] String nameArgument,
															 Single valueBoundLower,
															 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Single? valueArgument,
															 [NotNull] String nameArgument,
															 Single? valueBoundLower,
															 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Single? valueArgument,
															 [NotNull] String nameArgument,
															 Single? valueBoundLower,
															 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int32 valueArgument,
															 [NotNull] String nameArgument,
															 Int32 valueBoundLower,
															 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int32 valueArgument,
															 [NotNull] String nameArgument,
															 Int32 valueBoundLower,
															 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int32 valueArgument,
															 [NotNull] String nameArgument,
															 Int32? valueBoundLower,
															 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int32 valueArgument,
															 [NotNull] String nameArgument,
															 Int32? valueBoundLower,
															 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int32? valueArgument,
															 [NotNull] String nameArgument,
															 Int32 valueBoundLower,
															 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int32? valueArgument,
															 [NotNull] String nameArgument,
															 Int32 valueBoundLower,
															 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int32? valueArgument,
															 [NotNull] String nameArgument,
															 Int32? valueBoundLower,
															 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int32? valueArgument,
															 [NotNull] String nameArgument,
															 Int32? valueBoundLower,
															 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int64 valueArgument,
															 [NotNull] String nameArgument,
															 Int64 valueBoundLower,
															 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int64 valueArgument,
															 [NotNull] String nameArgument,
															 Int64 valueBoundLower,
															 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int64 valueArgument,
															 [NotNull] String nameArgument,
															 Int64? valueBoundLower,
															 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int64 valueArgument,
															 [NotNull] String nameArgument,
															 Int64? valueBoundLower,
															 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int64? valueArgument,
															 [NotNull] String nameArgument,
															 Int64 valueBoundLower,
															 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int64? valueArgument,
															 [NotNull] String nameArgument,
															 Int64 valueBoundLower,
															 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int64? valueArgument,
															 [NotNull] String nameArgument,
															 Int64? valueBoundLower,
															 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int64? valueArgument,
															 [NotNull] String nameArgument,
															 Int64? valueBoundLower,
															 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this SByte valueArgument,
															 [NotNull] String nameArgument,
															 SByte valueBoundLower,
															 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this SByte valueArgument,
															 [NotNull] String nameArgument,
															 SByte valueBoundLower,
															 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this SByte valueArgument,
															 [NotNull] String nameArgument,
															 SByte? valueBoundLower,
															 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this SByte valueArgument,
															 [NotNull] String nameArgument,
															 SByte? valueBoundLower,
															 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this SByte? valueArgument,
															 [NotNull] String nameArgument,
															 SByte valueBoundLower,
															 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this SByte? valueArgument,
															 [NotNull] String nameArgument,
															 SByte valueBoundLower,
															 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this SByte? valueArgument,
															 [NotNull] String nameArgument,
															 SByte? valueBoundLower,
															 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this SByte? valueArgument,
															 [NotNull] String nameArgument,
															 SByte? valueBoundLower,
															 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int16 valueArgument,
															 [NotNull] String nameArgument,
															 Int16 valueBoundLower,
															 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int16 valueArgument,
															 [NotNull] String nameArgument,
															 Int16 valueBoundLower,
															 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int16 valueArgument,
															 [NotNull] String nameArgument,
															 Int16? valueBoundLower,
															 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int16 valueArgument,
															 [NotNull] String nameArgument,
															 Int16? valueBoundLower,
															 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int16? valueArgument,
															 [NotNull] String nameArgument,
															 Int16 valueBoundLower,
															 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int16? valueArgument,
															 [NotNull] String nameArgument,
															 Int16 valueBoundLower,
															 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int16? valueArgument,
															 [NotNull] String nameArgument,
															 Int16? valueBoundLower,
															 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this Int16? valueArgument,
															 [NotNull] String nameArgument,
															 Int16? valueBoundLower,
															 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt32 valueArgument,
															 [NotNull] String nameArgument,
															 UInt32 valueBoundLower,
															 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt32 valueArgument,
															 [NotNull] String nameArgument,
															 UInt32 valueBoundLower,
															 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt32 valueArgument,
															 [NotNull] String nameArgument,
															 UInt32? valueBoundLower,
															 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt32 valueArgument,
															 [NotNull] String nameArgument,
															 UInt32? valueBoundLower,
															 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt32? valueArgument,
															 [NotNull] String nameArgument,
															 UInt32 valueBoundLower,
															 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt32? valueArgument,
															 [NotNull] String nameArgument,
															 UInt32 valueBoundLower,
															 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt32? valueArgument,
															 [NotNull] String nameArgument,
															 UInt32? valueBoundLower,
															 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt32? valueArgument,
															 [NotNull] String nameArgument,
															 UInt32? valueBoundLower,
															 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt64 valueArgument,
															 [NotNull] String nameArgument,
															 UInt64 valueBoundLower,
															 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt64 valueArgument,
															 [NotNull] String nameArgument,
															 UInt64 valueBoundLower,
															 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt64 valueArgument,
															 [NotNull] String nameArgument,
															 UInt64? valueBoundLower,
															 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt64 valueArgument,
															 [NotNull] String nameArgument,
															 UInt64? valueBoundLower,
															 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt64? valueArgument,
															 [NotNull] String nameArgument,
															 UInt64 valueBoundLower,
															 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt64? valueArgument,
															 [NotNull] String nameArgument,
															 UInt64 valueBoundLower,
															 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt64? valueArgument,
															 [NotNull] String nameArgument,
															 UInt64? valueBoundLower,
															 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt64? valueArgument,
															 [NotNull] String nameArgument,
															 UInt64? valueBoundLower,
															 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt16 valueArgument,
															 [NotNull] String nameArgument,
															 UInt16 valueBoundLower,
															 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt16 valueArgument,
															 [NotNull] String nameArgument,
															 UInt16 valueBoundLower,
															 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt16 valueArgument,
															 [NotNull] String nameArgument,
															 UInt16? valueBoundLower,
															 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt16 valueArgument,
															 [NotNull] String nameArgument,
															 UInt16? valueBoundLower,
															 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt16? valueArgument,
															 [NotNull] String nameArgument,
															 UInt16 valueBoundLower,
															 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt16? valueArgument,
															 [NotNull] String nameArgument,
															 UInt16 valueBoundLower,
															 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt16? valueArgument,
															 [NotNull] String nameArgument,
															 UInt16? valueBoundLower,
															 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/> and less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsBetweenExclusive(this UInt16? valueArgument,
															 [NotNull] String nameArgument,
															 UInt16? valueBoundLower,
															 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsBetweenExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this BigInteger valueArgument,
														[NotNull] String nameArgument,
														BigInteger valueBoundLower)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsLessThanOrEqual(valueBoundLower))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeGreaterThan, valueBoundLower));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this BigInteger valueArgument,
														[NotNull] String nameArgument,
														BigInteger? valueBoundLower)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsLessThanOrEqual(valueBoundLower))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeGreaterThan, valueBoundLower));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this BigInteger? valueArgument,
														[NotNull] String nameArgument,
														BigInteger valueBoundLower)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsLessThanOrEqual(valueBoundLower))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeGreaterThan, valueBoundLower));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this BigInteger? valueArgument,
														[NotNull] String nameArgument,
														BigInteger? valueBoundLower)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsLessThanOrEqual(valueBoundLower))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeGreaterThan, valueBoundLower));
			}
		}

#endif

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this DateTime valueArgument,
														[NotNull] String nameArgument,
														DateTime valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this DateTime valueArgument,
														[NotNull] String nameArgument,
														DateTime? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this DateTime? valueArgument,
														[NotNull] String nameArgument,
														DateTime valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this DateTime? valueArgument,
														[NotNull] String nameArgument,
														DateTime? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Byte valueArgument,
														[NotNull] String nameArgument,
														Byte valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Byte valueArgument,
														[NotNull] String nameArgument,
														Byte? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Byte? valueArgument,
														[NotNull] String nameArgument,
														Byte valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Byte? valueArgument,
														[NotNull] String nameArgument,
														Byte? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Decimal valueArgument,
														[NotNull] String nameArgument,
														Decimal valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Decimal valueArgument,
														[NotNull] String nameArgument,
														Decimal? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Decimal? valueArgument,
														[NotNull] String nameArgument,
														Decimal valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Decimal? valueArgument,
														[NotNull] String nameArgument,
														Decimal? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Double valueArgument,
														[NotNull] String nameArgument,
														Double valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Double valueArgument,
														[NotNull] String nameArgument,
														Double? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Double? valueArgument,
														[NotNull] String nameArgument,
														Double valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Double? valueArgument,
														[NotNull] String nameArgument,
														Double? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Single valueArgument,
														[NotNull] String nameArgument,
														Single valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Single valueArgument,
														[NotNull] String nameArgument,
														Single? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Single? valueArgument,
														[NotNull] String nameArgument,
														Single valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Single? valueArgument,
														[NotNull] String nameArgument,
														Single? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int32 valueArgument,
														[NotNull] String nameArgument,
														Int32 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int32 valueArgument,
														[NotNull] String nameArgument,
														Int32? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int32? valueArgument,
														[NotNull] String nameArgument,
														Int32 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int32? valueArgument,
														[NotNull] String nameArgument,
														Int32? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int64 valueArgument,
														[NotNull] String nameArgument,
														Int64 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int64 valueArgument,
														[NotNull] String nameArgument,
														Int64? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int64? valueArgument,
														[NotNull] String nameArgument,
														Int64 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int64? valueArgument,
														[NotNull] String nameArgument,
														Int64? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this SByte valueArgument,
														[NotNull] String nameArgument,
														SByte valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this SByte valueArgument,
														[NotNull] String nameArgument,
														SByte? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this SByte? valueArgument,
														[NotNull] String nameArgument,
														SByte valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this SByte? valueArgument,
														[NotNull] String nameArgument,
														SByte? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int16 valueArgument,
														[NotNull] String nameArgument,
														Int16 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int16 valueArgument,
														[NotNull] String nameArgument,
														Int16? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int16? valueArgument,
														[NotNull] String nameArgument,
														Int16 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this Int16? valueArgument,
														[NotNull] String nameArgument,
														Int16? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt32 valueArgument,
														[NotNull] String nameArgument,
														UInt32 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt32 valueArgument,
														[NotNull] String nameArgument,
														UInt32? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt32? valueArgument,
														[NotNull] String nameArgument,
														UInt32 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt32? valueArgument,
														[NotNull] String nameArgument,
														UInt32? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt64 valueArgument,
														[NotNull] String nameArgument,
														UInt64 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt64 valueArgument,
														[NotNull] String nameArgument,
														UInt64? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt64? valueArgument,
														[NotNull] String nameArgument,
														UInt64 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt64? valueArgument,
														[NotNull] String nameArgument,
														UInt64? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt16 valueArgument,
														[NotNull] String nameArgument,
														UInt16 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt16 valueArgument,
														[NotNull] String nameArgument,
														UInt16? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt16? valueArgument,
														[NotNull] String nameArgument,
														UInt16 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThan(this UInt16? valueArgument,
														[NotNull] String nameArgument,
														UInt16? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThan(valueArgument,
																			 nameArgument,
																			 valueBoundLower);
		}

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this BigInteger valueArgument,
															   [NotNull] String nameArgument,
															   BigInteger valueBoundLower)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsLessThan(valueBoundLower))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeGreaterThanOrEqual, valueBoundLower));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this BigInteger valueArgument,
															   [NotNull] String nameArgument,
															   BigInteger? valueBoundLower)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsLessThan(valueBoundLower))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeGreaterThanOrEqual, valueBoundLower));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this BigInteger? valueArgument,
															   [NotNull] String nameArgument,
															   BigInteger valueBoundLower)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsLessThan(valueBoundLower))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeGreaterThanOrEqual, valueBoundLower));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this BigInteger? valueArgument,
															   [NotNull] String nameArgument,
															   BigInteger? valueBoundLower)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsLessThan(valueBoundLower))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeGreaterThanOrEqual, valueBoundLower));
			}
		}

#endif

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this DateTime valueArgument,
															   [NotNull] String nameArgument,
															   DateTime valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this DateTime valueArgument,
															   [NotNull] String nameArgument,
															   DateTime? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this DateTime? valueArgument,
															   [NotNull] String nameArgument,
															   DateTime valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this DateTime? valueArgument,
															   [NotNull] String nameArgument,
															   DateTime? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Byte valueArgument,
															   [NotNull] String nameArgument,
															   Byte valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Byte valueArgument,
															   [NotNull] String nameArgument,
															   Byte? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Byte? valueArgument,
															   [NotNull] String nameArgument,
															   Byte valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Byte? valueArgument,
															   [NotNull] String nameArgument,
															   Byte? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Decimal valueArgument,
															   [NotNull] String nameArgument,
															   Decimal valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Decimal valueArgument,
															   [NotNull] String nameArgument,
															   Decimal? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Decimal? valueArgument,
															   [NotNull] String nameArgument,
															   Decimal valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Decimal? valueArgument,
															   [NotNull] String nameArgument,
															   Decimal? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Double valueArgument,
															   [NotNull] String nameArgument,
															   Double valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Double valueArgument,
															   [NotNull] String nameArgument,
															   Double? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Double? valueArgument,
															   [NotNull] String nameArgument,
															   Double valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Double? valueArgument,
															   [NotNull] String nameArgument,
															   Double? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Single valueArgument,
															   [NotNull] String nameArgument,
															   Single valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Single valueArgument,
															   [NotNull] String nameArgument,
															   Single? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Single? valueArgument,
															   [NotNull] String nameArgument,
															   Single valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Single? valueArgument,
															   [NotNull] String nameArgument,
															   Single? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int32 valueArgument,
															   [NotNull] String nameArgument,
															   Int32 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int32 valueArgument,
															   [NotNull] String nameArgument,
															   Int32? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int32? valueArgument,
															   [NotNull] String nameArgument,
															   Int32 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int32? valueArgument,
															   [NotNull] String nameArgument,
															   Int32? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int64 valueArgument,
															   [NotNull] String nameArgument,
															   Int64 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int64 valueArgument,
															   [NotNull] String nameArgument,
															   Int64? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int64? valueArgument,
															   [NotNull] String nameArgument,
															   Int64 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int64? valueArgument,
															   [NotNull] String nameArgument,
															   Int64? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this SByte valueArgument,
															   [NotNull] String nameArgument,
															   SByte valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this SByte valueArgument,
															   [NotNull] String nameArgument,
															   SByte? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this SByte? valueArgument,
															   [NotNull] String nameArgument,
															   SByte valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this SByte? valueArgument,
															   [NotNull] String nameArgument,
															   SByte? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int16 valueArgument,
															   [NotNull] String nameArgument,
															   Int16 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int16 valueArgument,
															   [NotNull] String nameArgument,
															   Int16? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int16? valueArgument,
															   [NotNull] String nameArgument,
															   Int16 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this Int16? valueArgument,
															   [NotNull] String nameArgument,
															   Int16? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt32 valueArgument,
															   [NotNull] String nameArgument,
															   UInt32 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt32 valueArgument,
															   [NotNull] String nameArgument,
															   UInt32? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt32? valueArgument,
															   [NotNull] String nameArgument,
															   UInt32 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt32? valueArgument,
															   [NotNull] String nameArgument,
															   UInt32? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt64 valueArgument,
															   [NotNull] String nameArgument,
															   UInt64 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt64 valueArgument,
															   [NotNull] String nameArgument,
															   UInt64? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt64? valueArgument,
															   [NotNull] String nameArgument,
															   UInt64 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt64? valueArgument,
															   [NotNull] String nameArgument,
															   UInt64? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt16 valueArgument,
															   [NotNull] String nameArgument,
															   UInt16 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt16 valueArgument,
															   [NotNull] String nameArgument,
															   UInt16? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt16? valueArgument,
															   [NotNull] String nameArgument,
															   UInt16 valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is greater than or equal to the <paramref name="valueBoundLower"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsGreaterThanOrEqual(this UInt16? valueArgument,
															   [NotNull] String nameArgument,
															   UInt16? valueBoundLower)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsGreaterThanOrEqual(valueArgument,
																					nameArgument,
																					valueBoundLower);
		}

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this BigInteger valueArgument,
													 [NotNull] String nameArgument,
													 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsGreaterThanOrEqual(valueBoundUpper))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeLessThan, valueBoundUpper));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this BigInteger valueArgument,
													 [NotNull] String nameArgument,
													 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsGreaterThanOrEqual(valueBoundUpper))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeLessThan, valueBoundUpper));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this BigInteger? valueArgument,
													 [NotNull] String nameArgument,
													 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsGreaterThanOrEqual(valueBoundUpper))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeLessThan, valueBoundUpper));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this BigInteger? valueArgument,
													 [NotNull] String nameArgument,
													 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsGreaterThanOrEqual(valueBoundUpper))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeLessThan, valueBoundUpper));
			}
		}

#endif

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this DateTime valueArgument,
													 [NotNull] String nameArgument,
													 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this DateTime valueArgument,
													 [NotNull] String nameArgument,
													 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this DateTime? valueArgument,
													 [NotNull] String nameArgument,
													 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this DateTime? valueArgument,
													 [NotNull] String nameArgument,
													 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Byte valueArgument,
													 [NotNull] String nameArgument,
													 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Byte valueArgument,
													 [NotNull] String nameArgument,
													 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Byte? valueArgument,
													 [NotNull] String nameArgument,
													 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Byte? valueArgument,
													 [NotNull] String nameArgument,
													 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Decimal valueArgument,
													 [NotNull] String nameArgument,
													 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Decimal valueArgument,
													 [NotNull] String nameArgument,
													 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Decimal? valueArgument,
													 [NotNull] String nameArgument,
													 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Decimal? valueArgument,
													 [NotNull] String nameArgument,
													 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Double valueArgument,
													 [NotNull] String nameArgument,
													 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Double valueArgument,
													 [NotNull] String nameArgument,
													 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Double? valueArgument,
													 [NotNull] String nameArgument,
													 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Double? valueArgument,
													 [NotNull] String nameArgument,
													 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Single valueArgument,
													 [NotNull] String nameArgument,
													 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Single valueArgument,
													 [NotNull] String nameArgument,
													 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Single? valueArgument,
													 [NotNull] String nameArgument,
													 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Single? valueArgument,
													 [NotNull] String nameArgument,
													 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int32 valueArgument,
													 [NotNull] String nameArgument,
													 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int32 valueArgument,
													 [NotNull] String nameArgument,
													 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int32? valueArgument,
													 [NotNull] String nameArgument,
													 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int32? valueArgument,
													 [NotNull] String nameArgument,
													 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int64 valueArgument,
													 [NotNull] String nameArgument,
													 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int64 valueArgument,
													 [NotNull] String nameArgument,
													 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int64? valueArgument,
													 [NotNull] String nameArgument,
													 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int64? valueArgument,
													 [NotNull] String nameArgument,
													 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this SByte valueArgument,
													 [NotNull] String nameArgument,
													 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this SByte valueArgument,
													 [NotNull] String nameArgument,
													 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this SByte? valueArgument,
													 [NotNull] String nameArgument,
													 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this SByte? valueArgument,
													 [NotNull] String nameArgument,
													 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int16 valueArgument,
													 [NotNull] String nameArgument,
													 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int16 valueArgument,
													 [NotNull] String nameArgument,
													 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int16? valueArgument,
													 [NotNull] String nameArgument,
													 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this Int16? valueArgument,
													 [NotNull] String nameArgument,
													 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt32 valueArgument,
													 [NotNull] String nameArgument,
													 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt32 valueArgument,
													 [NotNull] String nameArgument,
													 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt32? valueArgument,
													 [NotNull] String nameArgument,
													 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt32? valueArgument,
													 [NotNull] String nameArgument,
													 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt64 valueArgument,
													 [NotNull] String nameArgument,
													 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt64 valueArgument,
													 [NotNull] String nameArgument,
													 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt64? valueArgument,
													 [NotNull] String nameArgument,
													 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt64? valueArgument,
													 [NotNull] String nameArgument,
													 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt16 valueArgument,
													 [NotNull] String nameArgument,
													 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt16 valueArgument,
													 [NotNull] String nameArgument,
													 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt16? valueArgument,
													 [NotNull] String nameArgument,
													 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThan(this UInt16? valueArgument,
													 [NotNull] String nameArgument,
													 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThan(valueArgument,
																		  nameArgument,
																		  valueBoundUpper);
		}

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this BigInteger valueArgument,
															[NotNull] String nameArgument,
															BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsGreaterThan(valueBoundUpper))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeLessThanOrEqual, valueBoundUpper));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this BigInteger valueArgument,
															[NotNull] String nameArgument,
															BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsGreaterThan(valueBoundUpper))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeLessThanOrEqual, valueBoundUpper));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this BigInteger? valueArgument,
															[NotNull] String nameArgument,
															BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsGreaterThan(valueBoundUpper))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeLessThanOrEqual, valueBoundUpper));
			}
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this BigInteger? valueArgument,
															[NotNull] String nameArgument,
															BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			if (valueArgument.IsGreaterThan(valueBoundUpper))
			{
				throw new ArgumentOutOfRangeException(nameArgument, valueArgument, String.Format(CultureInfo.CurrentCulture, "{0}.  {1}, {2}.", Resources.ValueOutOfRange, Resources.ValueMustBeLessThanOrEqual, valueBoundUpper));
			}
		}

#endif

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this DateTime valueArgument,
															[NotNull] String nameArgument,
															DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this DateTime valueArgument,
															[NotNull] String nameArgument,
															DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this DateTime? valueArgument,
															[NotNull] String nameArgument,
															DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this DateTime? valueArgument,
															[NotNull] String nameArgument,
															DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Byte valueArgument,
															[NotNull] String nameArgument,
															Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Byte valueArgument,
															[NotNull] String nameArgument,
															Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Byte? valueArgument,
															[NotNull] String nameArgument,
															Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Byte? valueArgument,
															[NotNull] String nameArgument,
															Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Decimal valueArgument,
															[NotNull] String nameArgument,
															Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Decimal valueArgument,
															[NotNull] String nameArgument,
															Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Decimal? valueArgument,
															[NotNull] String nameArgument,
															Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Decimal? valueArgument,
															[NotNull] String nameArgument,
															Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Double valueArgument,
															[NotNull] String nameArgument,
															Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Double valueArgument,
															[NotNull] String nameArgument,
															Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Double? valueArgument,
															[NotNull] String nameArgument,
															Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Double? valueArgument,
															[NotNull] String nameArgument,
															Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Single valueArgument,
															[NotNull] String nameArgument,
															Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Single valueArgument,
															[NotNull] String nameArgument,
															Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Single? valueArgument,
															[NotNull] String nameArgument,
															Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Single? valueArgument,
															[NotNull] String nameArgument,
															Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int32 valueArgument,
															[NotNull] String nameArgument,
															Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int32 valueArgument,
															[NotNull] String nameArgument,
															Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int32? valueArgument,
															[NotNull] String nameArgument,
															Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int32? valueArgument,
															[NotNull] String nameArgument,
															Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int64 valueArgument,
															[NotNull] String nameArgument,
															Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int64 valueArgument,
															[NotNull] String nameArgument,
															Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int64? valueArgument,
															[NotNull] String nameArgument,
															Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int64? valueArgument,
															[NotNull] String nameArgument,
															Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this SByte valueArgument,
															[NotNull] String nameArgument,
															SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this SByte valueArgument,
															[NotNull] String nameArgument,
															SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this SByte? valueArgument,
															[NotNull] String nameArgument,
															SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this SByte? valueArgument,
															[NotNull] String nameArgument,
															SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int16 valueArgument,
															[NotNull] String nameArgument,
															Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int16 valueArgument,
															[NotNull] String nameArgument,
															Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int16? valueArgument,
															[NotNull] String nameArgument,
															Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this Int16? valueArgument,
															[NotNull] String nameArgument,
															Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt32 valueArgument,
															[NotNull] String nameArgument,
															UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt32 valueArgument,
															[NotNull] String nameArgument,
															UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt32? valueArgument,
															[NotNull] String nameArgument,
															UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt32? valueArgument,
															[NotNull] String nameArgument,
															UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt64 valueArgument,
															[NotNull] String nameArgument,
															UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt64 valueArgument,
															[NotNull] String nameArgument,
															UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt64? valueArgument,
															[NotNull] String nameArgument,
															UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt64? valueArgument,
															[NotNull] String nameArgument,
															UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt16 valueArgument,
															[NotNull] String nameArgument,
															UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt16 valueArgument,
															[NotNull] String nameArgument,
															UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt16? valueArgument,
															[NotNull] String nameArgument,
															UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsLessThanOrEqual(this UInt16? valueArgument,
															[NotNull] String nameArgument,
															UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsLessThanOrEqual(valueArgument,
																				 nameArgument,
																				 valueBoundUpper);
		}

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this BigInteger valueArgument,
													[NotNull] String nameArgument,
													BigInteger valueBoundLower,
													BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundLower);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this BigInteger valueArgument,
													[NotNull] String nameArgument,
													BigInteger valueBoundLower,
													BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundLower);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this BigInteger valueArgument,
													[NotNull] String nameArgument,
													BigInteger? valueBoundLower,
													BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundLower);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this BigInteger valueArgument,
													[NotNull] String nameArgument,
													BigInteger? valueBoundLower,
													BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundLower);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this BigInteger? valueArgument,
													[NotNull] String nameArgument,
													BigInteger valueBoundLower,
													BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundLower);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this BigInteger? valueArgument,
													[NotNull] String nameArgument,
													BigInteger valueBoundLower,
													BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundLower);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this BigInteger? valueArgument,
													[NotNull] String nameArgument,
													BigInteger? valueBoundLower,
													BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundLower);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this BigInteger? valueArgument,
													[NotNull] String nameArgument,
													BigInteger? valueBoundLower,
													BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThanOrEqual(nameArgument, valueBoundLower);
			valueArgument.RequireArgumentIsGreaterThanOrEqual(nameArgument, valueBoundUpper);
		}

#endif

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this DateTime valueArgument,
													[NotNull] String nameArgument,
													DateTime valueBoundLower,
													DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this DateTime valueArgument,
													[NotNull] String nameArgument,
													DateTime valueBoundLower,
													DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this DateTime valueArgument,
													[NotNull] String nameArgument,
													DateTime? valueBoundLower,
													DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this DateTime valueArgument,
													[NotNull] String nameArgument,
													DateTime? valueBoundLower,
													DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this DateTime? valueArgument,
													[NotNull] String nameArgument,
													DateTime valueBoundLower,
													DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this DateTime? valueArgument,
													[NotNull] String nameArgument,
													DateTime valueBoundLower,
													DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this DateTime? valueArgument,
													[NotNull] String nameArgument,
													DateTime? valueBoundLower,
													DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this DateTime? valueArgument,
													[NotNull] String nameArgument,
													DateTime? valueBoundLower,
													DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Byte valueArgument,
													[NotNull] String nameArgument,
													Byte valueBoundLower,
													Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Byte valueArgument,
													[NotNull] String nameArgument,
													Byte valueBoundLower,
													Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Byte valueArgument,
													[NotNull] String nameArgument,
													Byte? valueBoundLower,
													Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Byte valueArgument,
													[NotNull] String nameArgument,
													Byte? valueBoundLower,
													Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Byte? valueArgument,
													[NotNull] String nameArgument,
													Byte valueBoundLower,
													Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Byte? valueArgument,
													[NotNull] String nameArgument,
													Byte valueBoundLower,
													Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Byte? valueArgument,
													[NotNull] String nameArgument,
													Byte? valueBoundLower,
													Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Byte? valueArgument,
													[NotNull] String nameArgument,
													Byte? valueBoundLower,
													Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Decimal valueArgument,
													[NotNull] String nameArgument,
													Decimal valueBoundLower,
													Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Decimal valueArgument,
													[NotNull] String nameArgument,
													Decimal valueBoundLower,
													Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Decimal valueArgument,
													[NotNull] String nameArgument,
													Decimal? valueBoundLower,
													Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Decimal valueArgument,
													[NotNull] String nameArgument,
													Decimal? valueBoundLower,
													Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Decimal? valueArgument,
													[NotNull] String nameArgument,
													Decimal valueBoundLower,
													Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Decimal? valueArgument,
													[NotNull] String nameArgument,
													Decimal valueBoundLower,
													Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Decimal? valueArgument,
													[NotNull] String nameArgument,
													Decimal? valueBoundLower,
													Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Decimal? valueArgument,
													[NotNull] String nameArgument,
													Decimal? valueBoundLower,
													Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Double valueArgument,
													[NotNull] String nameArgument,
													Double valueBoundLower,
													Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Double valueArgument,
													[NotNull] String nameArgument,
													Double valueBoundLower,
													Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Double valueArgument,
													[NotNull] String nameArgument,
													Double? valueBoundLower,
													Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Double valueArgument,
													[NotNull] String nameArgument,
													Double? valueBoundLower,
													Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Double? valueArgument,
													[NotNull] String nameArgument,
													Double valueBoundLower,
													Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Double? valueArgument,
													[NotNull] String nameArgument,
													Double valueBoundLower,
													Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Double? valueArgument,
													[NotNull] String nameArgument,
													Double? valueBoundLower,
													Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Double? valueArgument,
													[NotNull] String nameArgument,
													Double? valueBoundLower,
													Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Single valueArgument,
													[NotNull] String nameArgument,
													Single valueBoundLower,
													Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Single valueArgument,
													[NotNull] String nameArgument,
													Single valueBoundLower,
													Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Single valueArgument,
													[NotNull] String nameArgument,
													Single? valueBoundLower,
													Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Single valueArgument,
													[NotNull] String nameArgument,
													Single? valueBoundLower,
													Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Single? valueArgument,
													[NotNull] String nameArgument,
													Single valueBoundLower,
													Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Single? valueArgument,
													[NotNull] String nameArgument,
													Single valueBoundLower,
													Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Single? valueArgument,
													[NotNull] String nameArgument,
													Single? valueBoundLower,
													Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Single? valueArgument,
													[NotNull] String nameArgument,
													Single? valueBoundLower,
													Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int32 valueArgument,
													[NotNull] String nameArgument,
													Int32 valueBoundLower,
													Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int32 valueArgument,
													[NotNull] String nameArgument,
													Int32 valueBoundLower,
													Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int32 valueArgument,
													[NotNull] String nameArgument,
													Int32? valueBoundLower,
													Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int32 valueArgument,
													[NotNull] String nameArgument,
													Int32? valueBoundLower,
													Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int32? valueArgument,
													[NotNull] String nameArgument,
													Int32 valueBoundLower,
													Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int32? valueArgument,
													[NotNull] String nameArgument,
													Int32 valueBoundLower,
													Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int32? valueArgument,
													[NotNull] String nameArgument,
													Int32? valueBoundLower,
													Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int32? valueArgument,
													[NotNull] String nameArgument,
													Int32? valueBoundLower,
													Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int64 valueArgument,
													[NotNull] String nameArgument,
													Int64 valueBoundLower,
													Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int64 valueArgument,
													[NotNull] String nameArgument,
													Int64 valueBoundLower,
													Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int64 valueArgument,
													[NotNull] String nameArgument,
													Int64? valueBoundLower,
													Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int64 valueArgument,
													[NotNull] String nameArgument,
													Int64? valueBoundLower,
													Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int64? valueArgument,
													[NotNull] String nameArgument,
													Int64 valueBoundLower,
													Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int64? valueArgument,
													[NotNull] String nameArgument,
													Int64 valueBoundLower,
													Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int64? valueArgument,
													[NotNull] String nameArgument,
													Int64? valueBoundLower,
													Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int64? valueArgument,
													[NotNull] String nameArgument,
													Int64? valueBoundLower,
													Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this SByte valueArgument,
													[NotNull] String nameArgument,
													SByte valueBoundLower,
													SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this SByte valueArgument,
													[NotNull] String nameArgument,
													SByte valueBoundLower,
													SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this SByte valueArgument,
													[NotNull] String nameArgument,
													SByte? valueBoundLower,
													SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this SByte valueArgument,
													[NotNull] String nameArgument,
													SByte? valueBoundLower,
													SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this SByte? valueArgument,
													[NotNull] String nameArgument,
													SByte valueBoundLower,
													SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this SByte? valueArgument,
													[NotNull] String nameArgument,
													SByte valueBoundLower,
													SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this SByte? valueArgument,
													[NotNull] String nameArgument,
													SByte? valueBoundLower,
													SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this SByte? valueArgument,
													[NotNull] String nameArgument,
													SByte? valueBoundLower,
													SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int16 valueArgument,
													[NotNull] String nameArgument,
													Int16 valueBoundLower,
													Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int16 valueArgument,
													[NotNull] String nameArgument,
													Int16 valueBoundLower,
													Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int16 valueArgument,
													[NotNull] String nameArgument,
													Int16? valueBoundLower,
													Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int16 valueArgument,
													[NotNull] String nameArgument,
													Int16? valueBoundLower,
													Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int16? valueArgument,
													[NotNull] String nameArgument,
													Int16 valueBoundLower,
													Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int16? valueArgument,
													[NotNull] String nameArgument,
													Int16 valueBoundLower,
													Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int16? valueArgument,
													[NotNull] String nameArgument,
													Int16? valueBoundLower,
													Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this Int16? valueArgument,
													[NotNull] String nameArgument,
													Int16? valueBoundLower,
													Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt32 valueArgument,
													[NotNull] String nameArgument,
													UInt32 valueBoundLower,
													UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt32 valueArgument,
													[NotNull] String nameArgument,
													UInt32 valueBoundLower,
													UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt32 valueArgument,
													[NotNull] String nameArgument,
													UInt32? valueBoundLower,
													UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt32 valueArgument,
													[NotNull] String nameArgument,
													UInt32? valueBoundLower,
													UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt32? valueArgument,
													[NotNull] String nameArgument,
													UInt32 valueBoundLower,
													UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt32? valueArgument,
													[NotNull] String nameArgument,
													UInt32 valueBoundLower,
													UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt32? valueArgument,
													[NotNull] String nameArgument,
													UInt32? valueBoundLower,
													UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt32? valueArgument,
													[NotNull] String nameArgument,
													UInt32? valueBoundLower,
													UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt64 valueArgument,
													[NotNull] String nameArgument,
													UInt64 valueBoundLower,
													UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt64 valueArgument,
													[NotNull] String nameArgument,
													UInt64 valueBoundLower,
													UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt64 valueArgument,
													[NotNull] String nameArgument,
													UInt64? valueBoundLower,
													UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt64 valueArgument,
													[NotNull] String nameArgument,
													UInt64? valueBoundLower,
													UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt64? valueArgument,
													[NotNull] String nameArgument,
													UInt64 valueBoundLower,
													UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt64? valueArgument,
													[NotNull] String nameArgument,
													UInt64 valueBoundLower,
													UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt64? valueArgument,
													[NotNull] String nameArgument,
													UInt64? valueBoundLower,
													UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt64? valueArgument,
													[NotNull] String nameArgument,
													UInt64? valueBoundLower,
													UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt16 valueArgument,
													[NotNull] String nameArgument,
													UInt16 valueBoundLower,
													UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt16 valueArgument,
													[NotNull] String nameArgument,
													UInt16 valueBoundLower,
													UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt16 valueArgument,
													[NotNull] String nameArgument,
													UInt16? valueBoundLower,
													UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt16 valueArgument,
													[NotNull] String nameArgument,
													UInt16? valueBoundLower,
													UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt16? valueArgument,
													[NotNull] String nameArgument,
													UInt16 valueBoundLower,
													UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt16? valueArgument,
													[NotNull] String nameArgument,
													UInt16 valueBoundLower,
													UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt16? valueArgument,
													[NotNull] String nameArgument,
													UInt16? valueBoundLower,
													UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than or equal to the <paramref name="valueBoundLower"/> and greater than or equal to the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutside(this UInt16? valueArgument,
													[NotNull] String nameArgument,
													UInt16? valueBoundLower,
													UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutside(valueArgument,
																		 nameArgument,
																		 valueBoundLower,
																		 valueBoundUpper);
		}

#if (!NETFX_V2 && !NETFX_V3 && !NETFX_V35)

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this BigInteger valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger valueBoundLower,
															 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this BigInteger valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger valueBoundLower,
															 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this BigInteger valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger? valueBoundLower,
															 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this BigInteger valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger? valueBoundLower,
															 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this BigInteger? valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger valueBoundLower,
															 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this BigInteger? valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger valueBoundLower,
															 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this BigInteger? valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger? valueBoundLower,
															 BigInteger valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Numerics.BigInteger"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this BigInteger? valueArgument,
															 [NotNull] String nameArgument,
															 BigInteger? valueBoundLower,
															 BigInteger? valueBoundUpper)
		{
			nameArgument.RequireArgumentHasNonwhiteSpaceValue("nameArgument");

			valueArgument.RequireArgumentIsLessThan(nameArgument, valueBoundUpper);
			valueArgument.RequireArgumentIsGreaterThan(nameArgument, valueBoundLower);
		}

#endif

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this DateTime valueArgument,
															 [NotNull] String nameArgument,
															 DateTime valueBoundLower,
															 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this DateTime valueArgument,
															 [NotNull] String nameArgument,
															 DateTime valueBoundLower,
															 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this DateTime valueArgument,
															 [NotNull] String nameArgument,
															 DateTime? valueBoundLower,
															 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this DateTime valueArgument,
															 [NotNull] String nameArgument,
															 DateTime? valueBoundLower,
															 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this DateTime? valueArgument,
															 [NotNull] String nameArgument,
															 DateTime valueBoundLower,
															 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this DateTime? valueArgument,
															 [NotNull] String nameArgument,
															 DateTime valueBoundLower,
															 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this DateTime? valueArgument,
															 [NotNull] String nameArgument,
															 DateTime? valueBoundLower,
															 DateTime valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this DateTime? valueArgument,
															 [NotNull] String nameArgument,
															 DateTime? valueBoundLower,
															 DateTime? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Byte valueArgument,
															 [NotNull] String nameArgument,
															 Byte valueBoundLower,
															 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Byte valueArgument,
															 [NotNull] String nameArgument,
															 Byte valueBoundLower,
															 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Byte valueArgument,
															 [NotNull] String nameArgument,
															 Byte? valueBoundLower,
															 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Byte valueArgument,
															 [NotNull] String nameArgument,
															 Byte? valueBoundLower,
															 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Byte? valueArgument,
															 [NotNull] String nameArgument,
															 Byte valueBoundLower,
															 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Byte? valueArgument,
															 [NotNull] String nameArgument,
															 Byte valueBoundLower,
															 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Byte? valueArgument,
															 [NotNull] String nameArgument,
															 Byte? valueBoundLower,
															 Byte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Byte? valueArgument,
															 [NotNull] String nameArgument,
															 Byte? valueBoundLower,
															 Byte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Decimal valueArgument,
															 [NotNull] String nameArgument,
															 Decimal valueBoundLower,
															 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Decimal valueArgument,
															 [NotNull] String nameArgument,
															 Decimal valueBoundLower,
															 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Decimal valueArgument,
															 [NotNull] String nameArgument,
															 Decimal? valueBoundLower,
															 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Decimal valueArgument,
															 [NotNull] String nameArgument,
															 Decimal? valueBoundLower,
															 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Decimal? valueArgument,
															 [NotNull] String nameArgument,
															 Decimal valueBoundLower,
															 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Decimal? valueArgument,
															 [NotNull] String nameArgument,
															 Decimal valueBoundLower,
															 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Decimal? valueArgument,
															 [NotNull] String nameArgument,
															 Decimal? valueBoundLower,
															 Decimal valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Decimal? valueArgument,
															 [NotNull] String nameArgument,
															 Decimal? valueBoundLower,
															 Decimal? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Double valueArgument,
															 [NotNull] String nameArgument,
															 Double valueBoundLower,
															 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Double valueArgument,
															 [NotNull] String nameArgument,
															 Double valueBoundLower,
															 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Double valueArgument,
															 [NotNull] String nameArgument,
															 Double? valueBoundLower,
															 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Double valueArgument,
															 [NotNull] String nameArgument,
															 Double? valueBoundLower,
															 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Double? valueArgument,
															 [NotNull] String nameArgument,
															 Double valueBoundLower,
															 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Double? valueArgument,
															 [NotNull] String nameArgument,
															 Double valueBoundLower,
															 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Double? valueArgument,
															 [NotNull] String nameArgument,
															 Double? valueBoundLower,
															 Double valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Double? valueArgument,
															 [NotNull] String nameArgument,
															 Double? valueBoundLower,
															 Double? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Single valueArgument,
															 [NotNull] String nameArgument,
															 Single valueBoundLower,
															 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Single valueArgument,
															 [NotNull] String nameArgument,
															 Single valueBoundLower,
															 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Single valueArgument,
															 [NotNull] String nameArgument,
															 Single? valueBoundLower,
															 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Single valueArgument,
															 [NotNull] String nameArgument,
															 Single? valueBoundLower,
															 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Single? valueArgument,
															 [NotNull] String nameArgument,
															 Single valueBoundLower,
															 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Single? valueArgument,
															 [NotNull] String nameArgument,
															 Single valueBoundLower,
															 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Single? valueArgument,
															 [NotNull] String nameArgument,
															 Single? valueBoundLower,
															 Single valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Single? valueArgument,
															 [NotNull] String nameArgument,
															 Single? valueBoundLower,
															 Single? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int32 valueArgument,
															 [NotNull] String nameArgument,
															 Int32 valueBoundLower,
															 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int32 valueArgument,
															 [NotNull] String nameArgument,
															 Int32 valueBoundLower,
															 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int32 valueArgument,
															 [NotNull] String nameArgument,
															 Int32? valueBoundLower,
															 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int32 valueArgument,
															 [NotNull] String nameArgument,
															 Int32? valueBoundLower,
															 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int32? valueArgument,
															 [NotNull] String nameArgument,
															 Int32 valueBoundLower,
															 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int32? valueArgument,
															 [NotNull] String nameArgument,
															 Int32 valueBoundLower,
															 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int32? valueArgument,
															 [NotNull] String nameArgument,
															 Int32? valueBoundLower,
															 Int32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int32? valueArgument,
															 [NotNull] String nameArgument,
															 Int32? valueBoundLower,
															 Int32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int64 valueArgument,
															 [NotNull] String nameArgument,
															 Int64 valueBoundLower,
															 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int64 valueArgument,
															 [NotNull] String nameArgument,
															 Int64 valueBoundLower,
															 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int64 valueArgument,
															 [NotNull] String nameArgument,
															 Int64? valueBoundLower,
															 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int64 valueArgument,
															 [NotNull] String nameArgument,
															 Int64? valueBoundLower,
															 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int64? valueArgument,
															 [NotNull] String nameArgument,
															 Int64 valueBoundLower,
															 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int64? valueArgument,
															 [NotNull] String nameArgument,
															 Int64 valueBoundLower,
															 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int64? valueArgument,
															 [NotNull] String nameArgument,
															 Int64? valueBoundLower,
															 Int64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int64? valueArgument,
															 [NotNull] String nameArgument,
															 Int64? valueBoundLower,
															 Int64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this SByte valueArgument,
															 [NotNull] String nameArgument,
															 SByte valueBoundLower,
															 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this SByte valueArgument,
															 [NotNull] String nameArgument,
															 SByte valueBoundLower,
															 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this SByte valueArgument,
															 [NotNull] String nameArgument,
															 SByte? valueBoundLower,
															 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this SByte valueArgument,
															 [NotNull] String nameArgument,
															 SByte? valueBoundLower,
															 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this SByte? valueArgument,
															 [NotNull] String nameArgument,
															 SByte valueBoundLower,
															 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this SByte? valueArgument,
															 [NotNull] String nameArgument,
															 SByte valueBoundLower,
															 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this SByte? valueArgument,
															 [NotNull] String nameArgument,
															 SByte? valueBoundLower,
															 SByte valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this SByte? valueArgument,
															 [NotNull] String nameArgument,
															 SByte? valueBoundLower,
															 SByte? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int16 valueArgument,
															 [NotNull] String nameArgument,
															 Int16 valueBoundLower,
															 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int16 valueArgument,
															 [NotNull] String nameArgument,
															 Int16 valueBoundLower,
															 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int16 valueArgument,
															 [NotNull] String nameArgument,
															 Int16? valueBoundLower,
															 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int16 valueArgument,
															 [NotNull] String nameArgument,
															 Int16? valueBoundLower,
															 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int16? valueArgument,
															 [NotNull] String nameArgument,
															 Int16 valueBoundLower,
															 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int16? valueArgument,
															 [NotNull] String nameArgument,
															 Int16 valueBoundLower,
															 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int16? valueArgument,
															 [NotNull] String nameArgument,
															 Int16? valueBoundLower,
															 Int16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this Int16? valueArgument,
															 [NotNull] String nameArgument,
															 Int16? valueBoundLower,
															 Int16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt32 valueArgument,
															 [NotNull] String nameArgument,
															 UInt32 valueBoundLower,
															 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt32 valueArgument,
															 [NotNull] String nameArgument,
															 UInt32 valueBoundLower,
															 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt32 valueArgument,
															 [NotNull] String nameArgument,
															 UInt32? valueBoundLower,
															 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt32 valueArgument,
															 [NotNull] String nameArgument,
															 UInt32? valueBoundLower,
															 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt32? valueArgument,
															 [NotNull] String nameArgument,
															 UInt32 valueBoundLower,
															 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt32? valueArgument,
															 [NotNull] String nameArgument,
															 UInt32 valueBoundLower,
															 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt32? valueArgument,
															 [NotNull] String nameArgument,
															 UInt32? valueBoundLower,
															 UInt32 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt32? valueArgument,
															 [NotNull] String nameArgument,
															 UInt32? valueBoundLower,
															 UInt32? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt64 valueArgument,
															 [NotNull] String nameArgument,
															 UInt64 valueBoundLower,
															 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt64 valueArgument,
															 [NotNull] String nameArgument,
															 UInt64 valueBoundLower,
															 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt64 valueArgument,
															 [NotNull] String nameArgument,
															 UInt64? valueBoundLower,
															 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt64 valueArgument,
															 [NotNull] String nameArgument,
															 UInt64? valueBoundLower,
															 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt64? valueArgument,
															 [NotNull] String nameArgument,
															 UInt64 valueBoundLower,
															 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt64? valueArgument,
															 [NotNull] String nameArgument,
															 UInt64 valueBoundLower,
															 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt64? valueArgument,
															 [NotNull] String nameArgument,
															 UInt64? valueBoundLower,
															 UInt64 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt64? valueArgument,
															 [NotNull] String nameArgument,
															 UInt64? valueBoundLower,
															 UInt64? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt16 valueArgument,
															 [NotNull] String nameArgument,
															 UInt16 valueBoundLower,
															 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt16 valueArgument,
															 [NotNull] String nameArgument,
															 UInt16 valueBoundLower,
															 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt16 valueArgument,
															 [NotNull] String nameArgument,
															 UInt16? valueBoundLower,
															 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt16 valueArgument,
															 [NotNull] String nameArgument,
															 UInt16? valueBoundLower,
															 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt16? valueArgument,
															 [NotNull] String nameArgument,
															 UInt16 valueBoundLower,
															 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt16? valueArgument,
															 [NotNull] String nameArgument,
															 UInt16 valueBoundLower,
															 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt16? valueArgument,
															 [NotNull] String nameArgument,
															 UInt16? valueBoundLower,
															 UInt16 valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		/// <summary>
		///		Validates that the provided <paramref name="valueArgument"/> is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </summary>
		/// <param name="valueArgument">
		///		The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if is less than the <paramref name="valueBoundLower"/> and greater than the <paramref name="valueBoundUpper"/>.
		/// </param>
		/// <param name="nameArgument">The argument name of the <paramref name="valueArgument"/> to validate.</param>
		/// <param name="valueBoundLower">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is less than or equal to.</param>
		/// <param name="valueBoundUpper">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to validate if the <paramref name="valueArgument"/> is greater than or equal to.</param>
		/// <exception cref="ArgumentNullException">The <paramref name="nameArgument"/> is <see langword="null"/>.</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		The <paramref name="nameArgument"/> is <see cref="F:System.String.Empty"/> or white space.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is greater than or equal to the <paramref name="valueBoundLower"/>.  
		///		-or-  
		///		The <paramref name="valueArgument"/> is less than or equal to the <paramref name="valueBoundUpper"/>.
		/// </exception>
		[CLSCompliant(false)]
		public static void RequireArgumentIsOutsideExclusive(this UInt16? valueArgument,
															 [NotNull] String nameArgument,
															 UInt16? valueBoundLower,
															 UInt16? valueBoundUpper)
		{
			ArgumentRelationalValidationUtility.RequireArgumentIsOutsideExclusive(valueArgument,
																				  nameArgument,
																				  valueBoundLower,
																				  valueBoundUpper);
		}

		#endregion

		#region Operators

		#endregion

		#region Nested Types

		#endregion
	}
}
